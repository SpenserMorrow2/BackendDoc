openapi: 3.0.3
info:
  title: P3Backend
  version: 1.0.0
  description: API schema for Project 3 Backend
paths:
  /auth/get-token:
    post:
      operationId: auth_get_token_create
      description: Generates an access token for a manager if the provided manager
        ID is valid and active. No auth needed
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                managerID:
                  type: integer
                  example: 12345
              required:
              - managerID
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: abcdef123456
                  expires_in:
                    type: integer
                    example: 3600
                  token_type:
                    type: string
                    example: Bearer
                  scope:
                    type: string
                    example: read write
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: manager_id is required and must be an integer.
                description: Occurs when the manager ID is missing or not an integer.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or inactive manager ID.
                description: Occurs when the manager ID does not exist or is inactive.
          description: ''
  /auth/logout:
    post:
      operationId: auth_logout_create
      description: Logs out the authenticated user by invalidating their access token.
      tags:
      - Authentication
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully and token invalidated.
                description: Successful logout response.
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access token not found.
                description: Occurs when the access token is invalid or missing.
          description: ''
  /auth/valid:
    post:
      operationId: auth_valid_create
      description: Validates an access token, checks its expiry, and returns whether
        the token is valid. No authentication required.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: abcdef123456
              required:
              - token
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  user:
                    type: string
                    example: manager_12345
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token is required.
                description: Occurs when the token is missing from the request body.
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Token has expired.
                description: Occurs when the provided token has expired.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: Invalid token.
                description: Occurs when the provided token is not found in the database.
          description: ''
  /customers/addCustomer:
    post:
      operationId: customers_addCustomer_create
      description: Create a new customer with a unique username and hashed password.
      tags:
      - Customer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  example: securepassword
              required:
              - username
              - password
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer created.
                  username:
                    type: string
                    example: john_doe
                  discounts_available:
                    type: integer
                    example: 0
                  total_spent:
                    type: number
                    example: 0.0
                  total_savings:
                    type: number
                    example: 0.0
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Username is taken.
          description: ''
  /customers/applyDiscounts:
    post:
      operationId: customers_applyDiscounts_create
      description: Apply discounts to a customer's order and update their available
        discounts and total savings.
      tags:
      - Customer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_doe
                discounts_applied:
                  type: integer
                  example: 2
                total_before_discount:
                  type: number
                  example: 50.0
                total_after_discount:
                  type: number
                  example: 45.0
              required:
              - username
              - discounts_applied
              - total_before_discount
              - total_after_discount
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Discounts applied successfully.
                  username:
                    type: string
                    example: john_doe
                  discounts_available:
                    type: integer
                    example: 1
                  total_savings:
                    type: number
                    example: 15.5
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Customer not found.
          description: ''
  /customers/login:
    post:
      operationId: customers_login_create
      description: Log in an existing customer by verifying their username and password.
      tags:
      - Customer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  example: securepassword
              required:
              - username
              - password
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful.
                  username:
                    type: string
                    example: john_doe
                  discounts_available:
                    type: integer
                    example: 2
                  total_savings:
                    type: number
                    example: 15.5
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid Password
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid username.
          description: ''
  /employees/active/:
    get:
      operationId: employees_active_retrieve
      description: Retrieve a list of all active employees.
      tags:
      - Employee
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    employeeid:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: John Doe
                    type:
                      type: string
                      example: Manager
                    employmentstatus:
                      type: string
                      example: active
          description: ''
  /employees/activeManagerID/:
    get:
      operationId: employees_activeManagerID_retrieve
      description: Retrieve a list of employee IDs for all active managers.
      tags:
      - Employee
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                example:
                - 101
                - 102
                - 103
          description: ''
  /employees/addEmployee:
    post:
      operationId: employees_addEmployee_create
      description: Create a new employee with a unique ID. Requires authentication.
      tags:
      - Employee
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                type:
                  type: string
                  example: Manager
              required:
              - name
              - type
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  employeeid:
                    type: integer
                    example: 10001
                  name:
                    type: string
                    example: John Doe
                  type:
                    type: string
                    example: Manager
                  employmentstatus:
                    type: string
                    example: active
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Name and type fields required.
          description: ''
  /employees/changeStatus/{employeeid}:
    patch:
      operationId: employees_changeStatus_partial_update
      description: Toggle an employee's employment status between 'active' and 'inactive'.
        Requires authentication.
      parameters:
      - in: path
        name: employeeid
        schema:
          type: integer
        description: The ID of the employee whose status is to be toggled.
        required: true
        examples:
          ExampleEmployeeID:
            value: 10001
            summary: A valid employee ID
            description: Toggles the employment status for employee with ID 10001.
      tags:
      - Employee
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  employmentstatus:
                    type: string
                    example: inactive
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Not Found
          description: ''
  /employees/getActiveNonManagers:
    get:
      operationId: employees_getActiveNonManagers_retrieve
      description: Retrieve all active employees who are not managers. Requires authentication.
      tags:
      - Employee
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    employeeid:
                      type: integer
                      example: 10001
                    name:
                      type: string
                      example: John Doe
                    type:
                      type: string
                      example: Employee
                    employmentstatus:
                      type: string
                      example: active
          description: ''
  /employees/getInactiveEmployees:
    get:
      operationId: employees_getInactiveEmployees_retrieve
      description: Retrieve all inactive employees. Requires authentication.
      tags:
      - Employee
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    employeeid:
                      type: integer
                      example: 10001
                    name:
                      type: string
                      example: John Doe
                    type:
                      type: string
                      example: Employee
                    employmentstatus:
                      type: string
                      example: inactive
          description: ''
  /employees/promoteEmployees:
    patch:
      operationId: employees_promoteEmployees_partial_update
      description: Promote a list of employees (by name) to 'Manager' type. Requires
        authentication.
      tags:
      - Employee
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                names:
                  type: array
                  items:
                    type: string
                    example: John Doe
                  example:
                  - John Doe
                  - Jane Smith
              required:
              - names
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Employees have been promoted to Manager
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Not Found
          description: ''
  /inventory/addItem:
    post:
      operationId: inventory_addItem_create
      description: Creates a new inventory item and optionally associates it with
        menu items.
      summary: Add a new inventory item
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Tomato
                  description: Name of the inventory item.
                quantity:
                  type: integer
                  example: 100
                  description: Quantity of the inventory item.
                min:
                  type: integer
                  example: 20
                  description: Minimum stock for the inventory item.
                menuitems:
                  type: array
                  items:
                    type: integer
                    example: 1
                  description: List of menu item IDs to associate with this inventory
                    item.
              required:
              - name
              - quantity
              - min
      responses:
        '201':
          content:
            application/json:
              schema:
                description: Inventory item created successfully.
          description: ''
        '400':
          description: No response body
  /inventory/changeInventoryMin/{rawItemID}:
    patch:
      operationId: changeInventoryMin
      description: Change the minimum quantity for a specific inventory item.
      summary: Update Minimum Quantity
      parameters:
      - in: path
        name: rawItemID
        schema:
          type: integer
        description: The ID of the raw inventory item.
        required: true
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_Min:
                  type: integer
                  description: The new minimum quantity for the inventory item.
                  example: 5
              required:
              - new_Min
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Minimum quantity for Flour changed successfully
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: '''new_Min'' is required and must be an integer.'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Inventory item not found
          description: ''
  /inventory/changeName/{rawitemid}:
    patch:
      operationId: inventory_changeName_partial_update
      summary: Change the name of an inventory item
      parameters:
      - in: path
        name: rawitemid
        schema:
          type: integer
        description: The ID of the inventory item to update.
        required: true
        examples:
          ValidID:
            value: 101
            summary: Change name for inventory item with ID 101
            description: Update the name of the inventory item with ID 101.
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New Tomato
                  description: The new name for the inventory item.
              required:
              - name
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Name for New Tomato changed successfully
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Inventory item not found.
          description: ''
  /inventory/createJunctionEntry:
    post:
      operationId: inventory_createJunctionEntry_create
      description: Links a raw inventory item to a menu item by creating a junction
        entry.
      summary: Create a junction entry
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                menuID:
                  type: integer
                  example: 5
                  description: The ID of the menu item to link.
                rawID:
                  type: integer
                  example: 101
                  description: The ID of the raw inventory item to link.
              required:
              - menuID
              - rawID
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Junction entry for raw item 101 and menu item 5 created
                      successfully.
                  data:
                    type: object
                    properties:
                      junctionid:
                        type: integer
                        example: 1
                      rawitemid:
                        type: integer
                        example: 10
                      menuitemid:
                        type: integer
                        example: 5
                    example:
                      junctionid: 1
                      rawitemid: 10
                      menuitemid: 5
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Both 'menuID' and 'rawID' are required.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Menu item with ID 5 does not exist.
          description: ''
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'An error occurred: database connection error.'
          description: ''
  /inventory/deleteJunctionEntry:
    delete:
      operationId: inventory_deleteJunctionEntry_destroy
      description: Removes a specific junction entry linking a menu item and a raw
        inventory item.
      summary: Delete a junction entry
      tags:
      - Inventory
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Junction entry for menu item 5 and raw item 101 has been
                      deleted.
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Both 'menuID' and 'rawID' are required.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Junction entry for menu item 5 and raw item 101 does
                      not exist.
          description: ''
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'An error occurred: database connection error.'
          description: ''
  /inventory/details/{rawitemid}:
    get:
      operationId: inventory_details_retrieve
      description: Fetches detailed information about an inventory item by its unique
        ID.
      summary: Retrieve details of a specific inventory item
      parameters:
      - in: path
        name: rawitemid
        schema:
          type: integer
        description: The ID of the inventory item to retrieve.
        required: true
        examples:
          ValidID:
            value: 1
            summary: Example of a valid inventory item ID
            description: Fetch the details for the inventory item with ID 1.
          Non-existentID:
            value: 9999
            summary: Example of a non-existent ID
            description: Attempting to fetch details for an inventory item that doesn't
              exist.
      tags:
      - Inventory
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  rawitemid:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Tomato
                  quantity:
                    type: integer
                    example: 100
                  min:
                    type: integer
                    example: 20
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Inventory item not found.
          description: ''
  /inventory/items/:
    get:
      operationId: inventory_items_retrieve
      description: Returns a list of all inventory items and their fields from the
        database.
      summary: Retrieve all inventory items
      tags:
      - Inventory
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    rawitemid:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Tomato
                    quantity:
                      type: integer
                      example: 100
                    min:
                      type: integer
                      example: 20
          description: ''
  /inventory/names/:
    get:
      operationId: inventory_names_retrieve
      description: Returns a list of names for all inventory items.
      summary: Retrieve all inventory item names
      tags:
      - Inventory
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: Tomato
          description: ''
  /inventory/nextInventoryID/:
    get:
      operationId: inventory_nextInventoryID_retrieve
      description: Calculates and returns the next available `rawitemid` for the RawInventory
        table..
      summary: Get the next available raw inventory ID
      tags:
      - Inventory
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: integer
                    example: 101
          description: ''
  /inventory/nextJunctionID/:
    get:
      operationId: inventory_nextJunctionID_retrieve
      description: Calculates and returns the next available `junctionid` for the
        MenuRawJunction table.
      summary: Get the next available junction ID
      tags:
      - Inventory
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: integer
                    example: 201
          description: ''
  /inventory/rawItemsForMenuItem/{itemid}:
    get:
      operationId: inventory_rawItemsForMenuItem_retrieve
      description: 'Fetches raw inventory items associated with a specific menu item
        ID. The response includes both the `rawitemid` and `name` for each raw inventory
        item. '
      summary: Get raw inventory items for a menu item
      parameters:
      - in: path
        name: itemid
        schema:
          type: integer
        description: The ID of the menu item whose raw inventory is to be retrieved.
        required: true
        examples:
          ValidID:
            value: 1
            summary: Retrieve inventory for menu item ID 1
            description: Fetch raw inventory associated with the menu item having
              ID 1.
          Non-existentID:
            value: 9999
            summary: Non-existent menu item
            description: Attempting to retrieve raw inventory for a menu item that
              doesn't exist.
      tags:
      - Inventory
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    rawitemid:
                      type: integer
                      example: 101
                    name:
                      type: string
                      example: Tomato
          description: ''
  /inventory/removeInventory/{removalid}:
    delete:
      operationId: inventory_removeInventory_destroy
      description: Deletes a specific inventory item and its associated junction entries.
      summary: Remove an inventory item
      parameters:
      - in: path
        name: removalid
        schema:
          type: integer
        description: The ID of the raw inventory item to remove.
        required: true
        examples:
          ValidID:
            value: 101
            summary: Delete inventory item with ID 101
            description: Removes the inventory item with ID 101 and its associated
              junction entries.
      tags:
      - Inventory
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: InventoryItem with itemid 101 and its associated junction
                      entries have been deleted.
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: rawitemid is required and must be an integer.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Given raw id doesn't exist
          description: ''
  /inventory/restockInventory:
    patch:
      operationId: inventory_restockInventory_partial_update
      summary: Restock all inventory items to 1.5 times their minimum
      tags:
      - Inventory
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Inventory Restock Completed
          description: ''
  /inventory/restockInventoryItem/{rawItemID}:
    patch:
      operationId: restockInventoryItem
      description: Add stock to a specific inventory item by its ID.
      summary: Restock a specific inventory item
      parameters:
      - in: path
        name: rawItemID
        schema:
          type: integer
        description: The ID of the raw inventory item to restock.
        required: true
        examples:
          ValidID:
            value: 101
            summary: Restock inventory item with ID 101
            description: Add stock to the inventory item with ID 101.
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quant:
                  type: integer
                  description: The quantity to add to the inventory item's stock.
                  example: 20
              required:
              - quant
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restock for Tomato completed
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: '''quant'' is required and must be an integer.'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Inventory item not found
          description: ''
  /menu/addItem:
    post:
      operationId: menu_addItem_create
      description: Create a new menu item along with associated prices, calorie information,
        and optional inventory links.
      summary: Add a new menu item
      tags:
      - Menu
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Orange Chicken
                type:
                  type: string
                  example: Entree
                prices:
                  type: array
                  items:
                    type: number
                  example:
                  - 5.99
                  - 7.99
                  - 9.99
                rawitems:
                  type: array
                  items:
                    type: integer
                  example:
                  - 1
                  - 2
                  - 3
                new_inventory_items:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Chicken
                      quantity:
                        type: integer
                        example: 50
                      min:
                        type: integer
                        example: 10
                calories:
                  type: string
                  example: 180-320
                serving_size:
                  type: string
                  example: 1 Bowl
              required:
              - name
              - type
              - prices
              - calories
              - serving_size
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Menu item created successfully.
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      field:
                        type: string
                        example: name
                      message:
                        type: string
                        example: Field is required.
          description: ''
  /menu/changeLargePrice/{itemid}:
    patch:
      operationId: menu_changeLargePrice_partial_update
      description: Update the large price of a menu item by its ID.
      summary: Change the large price of a menu item
      parameters:
      - in: path
        name: itemid
        schema:
          type: integer
        description: The ID of the menu item whose large price is to be updated.
        required: true
        examples:
          ValidItemID:
            value: 101
            summary: Update large price for item 101
            description: Change the large price of the menu item with ID 101.
      tags:
      - Menu
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_price:
                  type: number
                  example: 10.99
              required:
              - new_price
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Largeprice successfully updated.
                  itemid:
                    type: integer
                    example: 101
                  new_price:
                    type: number
                    example: 10.99
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: New price must be a number.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Price entry not found matching id
          description: ''
  /menu/changeMediumPrice/{itemid}:
    patch:
      operationId: menu_changeMediumPrice_partial_update
      description: Update the medium price of a menu item by its ID.
      summary: Change the medium price of a menu item
      parameters:
      - in: path
        name: itemid
        schema:
          type: integer
        description: The ID of the menu item whose medium price is to be updated.
        required: true
        examples:
          ValidItemID:
            value: 101
            summary: Update medium price for item 101
            description: Change the medium price of the menu item with ID 101.
      tags:
      - Menu
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_price:
                  type: number
                  example: 8.99
              required:
              - new_price
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Medprice successfully updated.
                  itemid:
                    type: integer
                    example: 101
                  new_price:
                    type: number
                    example: 8.99
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: New price must be a number.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Price entry not found matching id
          description: ''
  /menu/changeName/{itemid}:
    patch:
      operationId: menu_changeName_partial_update
      description: Update the name of a menu item identified by its ID.
      summary: Change the name of a menu item
      parameters:
      - in: path
        name: itemid
        schema:
          type: integer
        description: The ID of the menu item whose name is to be updated.
        required: true
        examples:
          ValidItemID:
            value: 101
            summary: Update name for item 101
            description: Change the name of the menu item with ID 101.
      tags:
      - Menu
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Panda Bowl
              required:
              - name
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Name for Updated Panda Bowl changed successfully
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid input or missing name field.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Menu item not found.
          description: ''
  /menu/changeNutrition/{itemid}:
    patch:
      operationId: menu_changeNutrition_partial_update
      description: Update the calorie and serving size information for a specific
        menu item using its ID.
      summary: Update nutritional information for a menu item
      parameters:
      - in: path
        name: itemid
        schema:
          type: integer
        description: The ID of the menu item to update.
        required: true
        examples:
          ValidItemID:
            value: 101
            summary: Example menu item ID
            description: The menu item ID for which the nutrition information will
              be updated.
      tags:
      - Menu
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                calories:
                  type: string
                  example: 200-300
                  description: The calorie range for the menu item (max 10 characters).
                serving_size:
                  type: string
                  example: 1 Bowl
                  description: The serving size for the menu item (max 10 characters).
              required:
              - calories
              - serving_size
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Nutrition information updated successfully.
                type: object
                properties:
                  message:
                    type: string
                    example: Nutrition for item ID 101 changed successfully.
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Validation errors for the request body.
                type: object
                properties:
                  calories:
                    type: string
                    example: Calories must be a non-empty string with a max length
                      of 10.
                  serving_size:
                    type: string
                    example: Serving size must be a non-empty string with a max length
                      of 10.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Menu item not found.
                type: object
                properties:
                  error:
                    type: string
                    example: Menu item not found.
          description: ''
  /menu/changeSmallPrice/{itemid}:
    patch:
      operationId: menu_changeSmallPrice_partial_update
      description: Update the small price of a menu item by its ID.
      summary: Change the small price of a menu item
      parameters:
      - in: path
        name: itemid
        schema:
          type: integer
        description: The ID of the menu item whose small price is to be updated.
        required: true
        examples:
          ValidItemID:
            value: 101
            summary: Update small price for item 101
            description: Change the small price of the menu item with ID 101.
      tags:
      - Menu
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_price:
                  type: number
                  example: 6.99
              required:
              - new_price
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Smallprice successfully updated.
                  itemid:
                    type: integer
                    example: 101
                  new_price:
                    type: number
                    example: 6.99
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Item ID must be an integer.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Price entry not found matching id
          description: ''
  /menu/deleteImage/{itemID}:
    delete:
      operationId: menu_deleteImage_destroy
      description: Delete the image file for a menu item identified by its ID.
      summary: Delete menu item image
      parameters:
      - in: path
        name: itemID
        schema:
          type: integer
        description: The ID of the menu item whose image is to be deleted.
        required: true
        examples:
          ValidItemID:
            value: 101
            summary: Delete image for item 101
            description: Delete the image file for the menu item with ID 101.
      tags:
      - Menu
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: Image deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Image file not found.
          description: ''
  /menu/item/{id}:
    get:
      operationId: menu_item_retrieve
      description: Fetches detailed information about a menu item by its unique ID.
      summary: Retrieve details of a specific menu item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: The ID of the menu item to retrieve.
        required: true
        examples:
          ValidID:
            value: 1
            summary: Example of a valid menu item ID
            description: Fetch the details for the menu item with ID 1.
          Non-existentID:
            value: 9999
            summary: Example of a non-existent ID
            description: Attempting to fetch details for an menu item that doesn't
              exist.
      tags:
      - Menu
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  itemid:
                    type: integer
                    example: 101
                  name:
                    type: string
                    example: Panda Bowl
                  type:
                    type: string
                    example: Entree
                  price_info:
                    type: object
                    properties:
                      smallprice:
                        type: number
                        example: 5.99
                      medprice:
                        type: number
                        example: 7.99
                      largeprice:
                        type: number
                        example: 9.99
                  calorie_info:
                    type: object
                    properties:
                      calories:
                        type: string
                        example: 180-320
                      serving_size:
                        type: string
                        example: 1 Bowl
                  image_url:
                    type: string
                    example: /MenuItemPictures/101.png
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Menu item not found.
          description: ''
  /menu/item/{id}/price:
    get:
      operationId: menu_item_price_retrieve
      description: Retrieve the price details (small, medium, and large) for a specific
        menu item by its ID.
      summary: Get menu item price details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: The ID of the menu item whose price details are to be retrieved.
        required: true
        examples:
          ValidID:
            value: 101
            summary: Retrieve price details for menu item with ID 101
      tags:
      - Menu
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  itemid:
                    type: integer
                    example: 101
                  smallprice:
                    type: number
                    example: 5.99
                  medprice:
                    type: number
                    example: 7.99
                  largeprice:
                    type: number
                    example: 9.99
          description: ''
        '404':
          description: No response body
  /menu/items/:
    get:
      operationId: menu_items_retrieve
      description: Retrieve a list of all menu items, including their price, calorie
        information, and image URLs.
      summary: Get all menu items
      tags:
      - Menu
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    itemid:
                      type: integer
                      example: 101
                    name:
                      type: string
                      example: Panda Bowl
                    type:
                      type: string
                      example: Entree
                    price_info:
                      type: object
                      properties:
                        smallprice:
                          type: number
                          example: 5.99
                        medprice:
                          type: number
                          example: 7.99
                        largeprice:
                          type: number
                          example: 9.99
                    calorie_info:
                      type: object
                      properties:
                        calories:
                          type: string
                          example: 180-320
                        serving_size:
                          type: string
                          example: 1 Bowl
                    image_url:
                      type: string
                      example: /MenuItemPictures/101.png
          description: ''
  /menu/menuItemPicture/{itemID}:
    get:
      operationId: menu_menuItemPicture_retrieve
      description: Retrieve the URL of the image for a menu item identified by its
        ID.
      summary: Get menu item picture URL
      parameters:
      - in: path
        name: itemID
        schema:
          type: integer
        description: The ID of the menu item for which the picture URL is being retrieved.
        required: true
        examples:
          ValidItemID:
            value: 101
            summary: Get picture for item 101
            description: Retrieve the image URL for the menu item with ID 101.
      tags:
      - Menu
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_url:
                    type: string
                    example: /MenuItemPictures/101.png
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Menu item image not found.
          description: ''
  /menu/names/:
    get:
      operationId: menu_names_retrieve
      description: Returns a list of names for all menu items.
      summary: Retrieve all menu item names
      tags:
      - Menu
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: Sugar Chicken
          description: ''
  /menu/removeItem/{removalid}:
    delete:
      operationId: menu_removeItem_destroy
      description: Delete a menu item by its ID, including associated entries like
        prices, calorie information, and junction entries.
      summary: Remove a menu item
      parameters:
      - in: path
        name: removalid
        schema:
          type: integer
        description: The ID of the menu item to be removed.
        required: true
        examples:
          ValidRemovalID:
            value: 27
            summary: Remove menu item with ID 27
            description: Deletes the menu item and all associated data.
      tags:
      - Menu
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: MenuItem with itemid 27 and its associated junction entries
                      have been deleted.
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: itemid is required and must be an integer.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Given menu id doesn't exist
          description: ''
  /menu/uploadImage/{itemID}:
    post:
      operationId: menu_uploadImage_create
      description: Upload an image for a menu item. The image should be included in
        the request body as a file.
      summary: Upload menu item image
      parameters:
      - in: path
        name: itemID
        schema:
          type: integer
        description: The ID of the menu item whose image is to be uploaded.
        required: true
        examples:
          ValidItemID:
            value: 101
            summary: Upload image for item 101
      tags:
      - Menu
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image file to be uploaded.
              required:
              - image
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Image uploaded successfully!
                  file_path:
                    type: string
                    example: /path/to/uploaded/image.png
          description: ''
  /orders/createOrder:
    post:
      operationId: orders_createOrder_create
      description: Create a new order with associated menu items, sizes, and total
        price. Includes an option to mark the order as served or send it to the kitchen.
      summary: Create a new order
      tags:
      - Orders
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                total_price:
                  type: number
                  example: 29.99
                  description: Total price of the order.
                item_ids:
                  type: array
                  items:
                    type: integer
                    example: 101
                  description: List of menu item IDs included in the order.
                sizes:
                  type: array
                  items:
                    type: string
                    example: medium
                  description: List of sizes for each menu item. Must match the length
                    of item_ids.
                served:
                  type: boolean
                  example: false
                  description: Indicates whether the order is already served or should
                    be sent to the kitchen.
              required:
              - total_price
              - item_ids
              - sizes
              - served
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderid:
                    type: integer
                    example: 1001
                description: Order successfully created.
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: '''served'' field is required as bool to determine kitchen
                      status'
                description: Validation error in request data.
          description: ''
  /orders/expandRecentOrders:
    get:
      operationId: orders_expandRecentOrders_retrieve
      description: Retrieve a list of orders placed between 30 and 60 minutes ago.
        Each order includes the order ID, total price, time (formatted as HH:MM),
        and the names of the menu items in the order.
      summary: Get Orders from 30 to 60 Minutes Ago
      tags:
      - Orders
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    orderid:
                      type: integer
                      example: 105
                    total_price:
                      type: number
                      example: 30.75
                    time:
                      type: string
                      example: '12:15'
                    item_names:
                      type: array
                      items:
                        type: string
                        example: Kung Pao Chicken
                      description: List of item names included in the order.
                  example:
                    orderid: 105
                    total_price: 30.75
                    time: '12:15'
                    item_names:
                    - Kung Pao Chicken
                    - Fried Rice
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No orders found between 30 and 60 minutes ago.
          description: ''
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'An unexpected error occurred: <error details>'
          description: ''
  /orders/getKitchenOrders:
    get:
      operationId: orders_getKitchenOrders_retrieve
      description: Get a list of all active kitchen orders, including their associated
        items, sizes, and times.
      summary: Retrieve active kitchen orders
      tags:
      - Orders
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_ids:
                    type: array
                    items:
                      type: integer
                      example: 1
                    description: List of order IDs.
                  items:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                        example: Item A
                    description: List of lists containing item names for each order.
                  sizes:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                        example: Small
                    description: List of lists containing sizes for each order.
                  times:
                    type: array
                    items:
                      type: string
                      example: '12:30:00'
                    description: List of times for each order.
                example:
                  order_ids:
                  - 1
                  - 2
                  - 3
                  items:
                  - - Item A
                    - Item B
                  - - Item C
                  - - Item D
                    - Item E
                  sizes:
                  - - Small
                    - Medium
                  - - Large
                  - - Small
                    - Large
                  times:
                  - '12:30:00'
                  - '12:45:00'
                  - '13:00:00'
          description: ''
  /orders/productUsageReport:
    post:
      operationId: orders_productUsageReport_create
      description: Retrieve a report on the usage of raw inventory items for orders
        placed within a specified time frame.
      summary: Get product usage report
      tags:
      - Reports
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  format: date
                  example: '2023-11-01'
                  description: The start date of the report (YYYY-MM-DD).
                end_date:
                  type: string
                  format: date
                  example: '2023-11-30'
                  description: The end date of the report (YYYY-MM-DD).
              required:
              - start_date
              - end_date
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_names:
                    type: array
                    items:
                      type: string
                      example: Chicken Breast
                  usage_counts:
                    type: array
                    items:
                      type: string
                      example: '25'
                example:
                  product_names:
                  - Chicken Breast
                  - Soy Sauce
                  - Rice
                  usage_counts:
                  - '25'
                  - '10'
                  - '50'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: '''start_date'' and ''end_date'' fields are required.'
          description: ''
  /orders/recentOrders:
    get:
      operationId: orders_recentOrders_retrieve
      description: Retrieve a list of orders placed in the last 30 minutes. Each order
        includes the order ID, total price, time (formatted as HH:MM), and the names
        of the menu items in the order.
      summary: Get Recent Orders
      tags:
      - Orders
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    orderid:
                      type: integer
                      example: 102
                    total_price:
                      type: number
                      example: 25.5
                    time:
                      type: string
                      example: '12:30'
                    item_names:
                      type: array
                      items:
                        type: string
                        example: Orange Chicken
                      description: List of item names included in the order.
                  example:
                    orderid: 102
                    total_price: 25.5
                    time: '12:30'
                    item_names:
                    - Orange Chicken
                    - Beijing Beef
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No orders found in the last 30 minutes.
          description: ''
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'An unexpected error occurred: <error details>'
          description: ''
  /orders/refund/{orderid}:
    patch:
      operationId: orders_refund_partial_update
      description: Refund the specified order by setting its total price to 0. The
        order ID must be provided as a URL parameter.
      summary: Refund an Order
      parameters:
      - in: path
        name: orderid
        schema:
          type: integer
        description: The ID of the order to refund.
        required: true
        examples:
          ValidOrderID:
            value: 105
            summary: Refund order with ID 105
            description: Sets the total price of order 105 to 0.
      tags:
      - Orders
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order with ID 105 total price set to 0
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order not found.
          description: ''
  /orders/removeKitchenOrder/{orderID}:
    delete:
      operationId: orders_removeKitchenOrder_destroy
      description: Remove a kitchen order by its ID. If the order ID does not exist,
        an error is returned.
      summary: Remove a kitchen order
      parameters:
      - in: path
        name: orderID
        schema:
          type: integer
        description: The ID of the kitchen order to be removed.
        required: true
        examples:
          ValidOrderID:
            value: 101
            summary: Remove kitchen order with ID 101
            description: Deletes the kitchen order with the specified ID.
      tags:
      - Orders
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Active Kitchen Order with order id 101 has been deleted.
                description: Kitchen order successfully deleted.
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: order ID is required and must be an integer.
                description: Invalid input data.
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Given order ID doesn't exist
                description: The specified order ID was not found.
          description: ''
  /orders/restockReport:
    get:
      operationId: orders_restockReport_retrieve
      description: Retrieve a list of inventory items where the quantity is less than
        the minimum required value.
      summary: Get restock report
      tags:
      - Reports
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    rawitemid:
                      type: integer
                      example: 101
                    name:
                      type: string
                      example: Tomato
                    quantity:
                      type: integer
                      example: 5
                    min:
                      type: integer
                      example: 10
                example:
                - rawitemid: 101
                  name: Tomato
                  quantity: 5
                  min: 10
                - rawitemid: 102
                  name: Onion
                  quantity: 3
                  min: 8
          description: ''
  /orders/salesReport:
    post:
      operationId: orders_salesReport_create
      description: Retrieve a report of the total sales for each menu item within
        the specified time frame.
      summary: Get sales report
      tags:
      - Reports
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_d:
                  type: string
                  format: date
                  example: '2023-11-01'
                  description: The start date of the sales report (YYYY-MM-DD).
                end_d:
                  type: string
                  format: date
                  example: '2023-11-30'
                  description: The end date of the sales report (YYYY-MM-DD).
              required:
              - start_d
              - end_d
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  sales_report:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Orange Chicken
                        quantity:
                          type: integer
                          example: 120
                example:
                  sales_report:
                  - name: Orange Chicken
                    quantity: 120
                  - name: Beef Broccoli
                    quantity: 85
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: '''start_d'' and ''end_d'' fields are required.'
          description: ''
  /orders/xreport:
    get:
      operationId: orders_xreport_retrieve
      description: Retrieve an X report showing the total sales for each hour from
        the start of the day to the current time since the last z report. The report
        includes sales data grouped by hourly time ranges.
      summary: Get X Report
      tags:
      - Reports
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  time_ranges:
                    type: array
                    items:
                      type: string
                      example: 08:00:00 - 09:00:00
                    description: List of hourly time ranges.
                  sales_totals:
                    type: array
                    items:
                      type: string
                      example: '150.00'
                    description: Total sales for each corresponding time range.
                example:
                  time_ranges:
                  - 08:00:00 - 09:00:00
                  - 09:00:00 - 10:00:00
                  - 10:00:00 - 11:00:00
                  sales_totals:
                  - '50.00'
                  - '100.00'
                  - '75.50'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No orders found within the specified range.
          description: ''
  /orders/zreport:
    get:
      operationId: orders_zreport_retrieve
      description: Retrieve a Z report showing the total sales for each hour of the
        day from 8:00 AM to 10:00 PM. The report also includes the total revenue for
        the entire day.
      summary: Get Z Report
      tags:
      - Reports
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  time_ranges:
                    type: array
                    items:
                      type: string
                      example: 08:00:00 - 09:00:00
                    description: List of hourly time ranges and total daily revenue.
                  sales_totals:
                    type: array
                    items:
                      type: string
                      example: '150.00'
                    description: Total sales for each corresponding time range, followed
                      by the total revenue for the day.
                example:
                  time_ranges:
                  - 08:00:00 - 09:00:00
                  - 09:00:00 - 10:00:00
                  - 10:00:00 - 11:00:00
                  - 'Total Revenue For the Day:'
                  sales_totals:
                  - '50.00'
                  - '100.00'
                  - '75.50'
                  - '225.50'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No orders found within the specified range.
          description: ''
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows: {}
